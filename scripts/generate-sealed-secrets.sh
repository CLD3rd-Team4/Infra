#!/bin/bash

echo "========================================"
echo "Sealed Secrets Generator Script"
echo "========================================"

# Configuration
NAMESPACE="service-platform"
CONTROLLER_NAMESPACE="kube-system"
REGION="ap-northeast-2"

# SSM Parameter Store paths
GITHUB_USERNAME_PARAM="/mapzip/config-server/github-username"
GITHUB_TOKEN_PARAM="/mapzip/config-server/github-token"
ENCRYPT_KEY_PARAM="/mapzip/config-server/encrypt-key"

# Output file
OUTPUT_FILE="../argocd/platform/sealed-secrets.yaml"

echo "Checking prerequisites..."

# Check if kubectl is available
if ! command -v kubectl &> /dev/null; then
    echo "Error: kubectl is not installed or not in PATH"
    exit 1
fi

# Check if kubeseal is available
if ! command -v kubeseal &> /dev/null; then
    echo "Error: kubeseal is not installed or not in PATH"
    echo "Install with: brew install kubeseal"
    exit 1
fi

# Check if aws cli is available
if ! command -v aws &> /dev/null; then
    echo "Error: aws cli is not installed or not in PATH"
    exit 1
fi

# Check if sealed-secrets controller is running
echo "Checking Sealed Secrets Controller..."
if ! kubectl get deployment -n $CONTROLLER_NAMESPACE -l app.kubernetes.io/name=sealed-secrets &> /dev/null; then
    echo "Error: Sealed Secrets Controller is not installed"
    echo "Run setup-k8s-mac.sh first to install it"
    exit 1
fi

# Wait for controller to be ready
echo "Waiting for controller to be ready..."
kubectl wait --for=condition=available --timeout=60s deployment -l app.kubernetes.io/name=sealed-secrets -n $CONTROLLER_NAMESPACE

echo "Fetching secrets from AWS SSM Parameter Store..."
echo "Note: SSM parameters should be created via Terraform first"

# Get GitHub credentials from SSM (Terraform에서 생성된 값들)
GITHUB_USERNAME=$(aws ssm get-parameter --region $REGION --name "$GITHUB_USERNAME_PARAM" --query 'Parameter.Value' --output text 2>/dev/null)
GITHUB_TOKEN=$(aws ssm get-parameter --region $REGION --name "$GITHUB_TOKEN_PARAM" --with-decryption --query 'Parameter.Value' --output text 2>/dev/null)

if [ -z "$GITHUB_USERNAME" ] || [ -z "$GITHUB_TOKEN" ]; then
    echo "Error: Failed to fetch GitHub credentials from SSM Parameter Store"
    echo "Please ensure Terraform has been applied with the following variables:"
    echo "  - config_server_github_username"
    echo "  - config_server_github_token"
    echo ""
    echo "Example terraform.tfvars:"
    echo "config_server_github_username = \"KingZuto\""
    echo "config_server_github_token = \"ghp_your_token_here\""
    exit 1
fi

# Get encrypt key from SSM (선택적)
ENCRYPT_KEY=$(aws ssm get-parameter --region $REGION --name "$ENCRYPT_KEY_PARAM" --with-decryption --query 'Parameter.Value' --output text 2>/dev/null)

echo "Creating namespace if not exists..."
kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

echo "Generating Sealed Secrets..."

# Create temporary files
GIT_SECRET_TEMP=$(mktemp)
ENCRYPT_SECRET_TEMP=$(mktemp)

# Generate Git Secret
kubectl create secret generic config-server-git-secret \
    --namespace=$NAMESPACE \
    --from-literal=username="$GITHUB_USERNAME" \
    --from-literal=token="$GITHUB_TOKEN" \
    --dry-run=client -o yaml | \
kubeseal \
    --controller-namespace $CONTROLLER_NAMESPACE \
    --scope namespace-wide \
    --format yaml > "$GIT_SECRET_TEMP"

if [ $? -ne 0 ]; then
    echo "❌ Failed to generate git secret"
    rm -f "$GIT_SECRET_TEMP" "$ENCRYPT_SECRET_TEMP"
    exit 1
fi

# Generate Encrypt Secret (if encrypt key exists)
if [ -n "$ENCRYPT_KEY" ]; then
    echo "Generating encrypt secret..."
    kubectl create secret generic config-server-encrypt-secret \
        --namespace=$NAMESPACE \
        --from-literal=encrypt-key="$ENCRYPT_KEY" \
        --dry-run=client -o yaml | \
    kubeseal \
        --controller-namespace $CONTROLLER_NAMESPACE \
        --scope namespace-wide \
        --format yaml > "$ENCRYPT_SECRET_TEMP"

    if [ $? -ne 0 ]; then
        echo "❌ Failed to generate encrypt secret"
        rm -f "$GIT_SECRET_TEMP" "$ENCRYPT_SECRET_TEMP"
        exit 1
    fi
else
    echo "⚠️  Encrypt key not found in SSM - skipping encrypt secret generation"
    echo "   This is normal if enable_config_server_encrypt_key = false in Terraform"
fi

# Combine secrets into one file
cat > "$OUTPUT_FILE" << EOF
# Config Server Sealed Secrets
# Generated by: generate-sealed-secrets.sh
# Date: $(date)
#
# Prerequisites:
# 1. Apply Terraform with config_server_* variables
# 2. Ensure Sealed Secrets Controller is installed
# 3. Run this script to generate encrypted secrets

EOF

# Add Git Secret
echo "# Config Server Git Secret (SealedSecret)" >> "$OUTPUT_FILE"
cat "$GIT_SECRET_TEMP" >> "$OUTPUT_FILE"

# Add Encrypt Secret if it exists
if [ -n "$ENCRYPT_KEY" ]; then
    echo "" >> "$OUTPUT_FILE"
    echo "---" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
    echo "# Config Server Encrypt Secret (SealedSecret)" >> "$OUTPUT_FILE"
    cat "$ENCRYPT_SECRET_TEMP" >> "$OUTPUT_FILE"
fi

# Cleanup
rm -f "$GIT_SECRET_TEMP" "$ENCRYPT_SECRET_TEMP"

echo "✅ Sealed secrets generated successfully!"
echo ""
echo "Generated file: $OUTPUT_FILE"
echo ""
if [ -n "$ENCRYPT_KEY" ]; then
    echo "Generated secrets:"
    echo "  - config-server-git-secret (GitHub credentials)"
    echo "  - config-server-encrypt-secret (Encryption key)"
else
    echo "Generated secrets:"
    echo "  - config-server-git-secret (GitHub credentials)"
    echo "  - config-server-encrypt-secret (SKIPPED - not enabled in Terraform)"
fi
echo ""
echo "Next steps:"
echo "1. Commit the updated sealed-secrets.yaml file"
echo "2. ArgoCD will automatically apply the secrets"
echo ""
echo "To verify secrets manually:"
echo "  kubectl get sealedsecrets -n $NAMESPACE"
echo "  kubectl get secrets -n $NAMESPACE"

#!/bin/bash

echo "========================================"
echo "Sealed Secrets Generator Script"
echo "========================================"

# Configuration
NAMESPACE="service-platform"
CONTROLLER_NAMESPACE="kube-system"
REGION="ap-northeast-2"

# SSM Parameter Store paths
GITHUB_USERNAME_PARAM="/mapzip/config-server/github-username"
GITHUB_TOKEN_PARAM="/mapzip/config-server/github-token"
ENCRYPT_KEY_PARAM="/mapzip/config-server/encrypt-key"

# Output file
OUTPUT_FILE="../argocd/platform/sealed-secrets.yaml"

echo "Checking prerequisites..."

# Check if kubectl is available
if ! command -v kubectl &> /dev/null; then
    echo "Error: kubectl is not installed or not in PATH"
    exit 1
fi

# Check if kubeseal is available
if ! command -v kubeseal &> /dev/null; then
    echo "Error: kubeseal is not installed or not in PATH"
    echo "Install with: brew install kubeseal"
    exit 1
fi

# Check if aws cli is available
if ! command -v aws &> /dev/null; then
    echo "Error: aws cli is not installed or not in PATH"
    exit 1
fi

# Check if sealed-secrets controller is running (Helm 설치된 것 체크)
echo "Checking Sealed Secrets Controller..."
if ! kubectl get deployment -n $CONTROLLER_NAMESPACE -l app.kubernetes.io/name=sealed-secrets &> /dev/null; then
    echo "Error: Sealed Secrets Controller is not installed"
    echo "Run setup-k8s-mac.sh first to install it"
    exit 1
fi

# Wait for controller to be ready
echo "Waiting for controller to be ready..."
kubectl wait --for=condition=available --timeout=60s deployment -l app.kubernetes.io/name=sealed-secrets -n $CONTROLLER_NAMESPACE

echo "Fetching secrets from AWS SSM Parameter Store..."

# Get GitHub credentials from SSM
GITHUB_USERNAME=$(aws ssm get-parameter --region $REGION --name "$GITHUB_USERNAME_PARAM" --query 'Parameter.Value' --output text 2>/dev/null)
GITHUB_TOKEN=$(aws ssm get-parameter --region $REGION --name "$GITHUB_TOKEN_PARAM" --with-decryption --query 'Parameter.Value' --output text 2>/dev/null)

if [ -z "$GITHUB_USERNAME" ] || [ -z "$GITHUB_TOKEN" ]; then
    echo "Error: Failed to fetch GitHub credentials from SSM Parameter Store"
    echo "Please create the parameters first:"
    echo ""
    echo "aws ssm put-parameter --region $REGION --name '$GITHUB_USERNAME_PARAM' --value 'KingZuto' --type 'String'"
    echo "aws ssm put-parameter --region $REGION --name '$GITHUB_TOKEN_PARAM' --value 'your-token' --type 'SecureString'"
    exit 1
fi

# Get or generate encrypt key
ENCRYPT_KEY=$(aws ssm get-parameter --region $REGION --name "$ENCRYPT_KEY_PARAM" --with-decryption --query 'Parameter.Value' --output text 2>/dev/null)

if [ -z "$ENCRYPT_KEY" ]; then
    echo "Generating new encrypt key..."
    ENCRYPT_KEY=$(openssl rand -base64 32)
    
    # Store the new key in SSM
    aws ssm put-parameter \
        --region $REGION \
        --name "$ENCRYPT_KEY_PARAM" \
        --value "$ENCRYPT_KEY" \
        --type "SecureString" \
        --description "Config Server encryption key for mapzip project" \
        --overwrite
    
    echo "New encrypt key stored in SSM Parameter Store"
else
    echo "Using existing encrypt key from SSM Parameter Store"
fi

echo "Creating namespace if not exists..."
kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

echo "Generating Sealed Secrets..."

# Create temporary files
GIT_SECRET_TEMP=$(mktemp)
ENCRYPT_SECRET_TEMP=$(mktemp)

# Generate Git Secret
kubectl create secret generic config-server-git-secret \
    --namespace=$NAMESPACE \
    --from-literal=username="$GITHUB_USERNAME" \
    --from-literal=token="$GITHUB_TOKEN" \
    --dry-run=client -o yaml | \
kubeseal \
    --controller-namespace $CONTROLLER_NAMESPACE \
    --scope namespace-wide \
    --format yaml > "$GIT_SECRET_TEMP"

if [ $? -ne 0 ]; then
    echo "❌ Failed to generate git secret"
    rm -f "$GIT_SECRET_TEMP" "$ENCRYPT_SECRET_TEMP"
    exit 1
fi

# Generate Encrypt Secret
kubectl create secret generic config-server-encrypt-secret \
    --namespace=$NAMESPACE \
    --from-literal=encrypt-key="$ENCRYPT_KEY" \
    --dry-run=client -o yaml | \
kubeseal \
    --controller-namespace $CONTROLLER_NAMESPACE \
    --scope namespace-wide \
    --format yaml > "$ENCRYPT_SECRET_TEMP"

if [ $? -ne 0 ]; then
    echo "❌ Failed to generate encrypt secret"
    rm -f "$GIT_SECRET_TEMP" "$ENCRYPT_SECRET_TEMP"
    exit 1
fi

# Combine both secrets into one file
cat > "$OUTPUT_FILE" << EOF
# Config Server Sealed Secrets
# Generated by: generate-sealed-secrets.sh
# Date: $(date)
#
# To regenerate these secrets:
# 1. Update values in AWS SSM Parameter Store if needed
# 2. Run: ./generate-sealed-secrets.sh

EOF

# Add Git Secret
echo "# Config Server Git Secret (SealedSecret)" >> "$OUTPUT_FILE"
cat "$GIT_SECRET_TEMP" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"
echo "---" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

# Add Encrypt Secret
echo "# Config Server Encrypt Secret (SealedSecret)" >> "$OUTPUT_FILE"
cat "$ENCRYPT_SECRET_TEMP" >> "$OUTPUT_FILE"

# Cleanup
rm -f "$GIT_SECRET_TEMP" "$ENCRYPT_SECRET_TEMP"

echo "✅ Sealed secrets generated successfully!"
echo ""
echo "Generated file: $OUTPUT_FILE"
echo ""
echo "Next steps:"
echo "1. Commit the updated sealed-secrets.yaml file"
echo "2. ArgoCD will automatically apply the secrets"
echo ""
echo "To verify secrets manually:"
echo "  kubectl get sealedsecrets -n $NAMESPACE"
echo "  kubectl get secrets -n $NAMESPACE"
